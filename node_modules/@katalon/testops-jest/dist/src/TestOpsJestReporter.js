"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestOpsJestReporter = void 0;
const testops_commons_1 = require("@katalon/testops-commons");
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const METADATA_FRAMEWORK = "jest";
const METADATA_LANGUAGE = "javascript";
class TestOpsJestReporter {
    constructor(globalConfig, options) {
        this.currentExecution = null;
        this.globalConfig = globalConfig;
        this.options = options;
        this.reportLifecycle = new testops_commons_1.ReportLifecycle(this.options);
    }
    onRunStart(results, options) {
        const execution = testops_commons_1.TestCreator.execution();
        this.currentExecution = this.reportLifecycle.startExecution(execution);
    }
    onTestResult(test, testResult, aggregatedResult) {
        const { testResults = [] } = testResult;
        if (testResults.length > 0) {
            const testSuite = this.buildTestSuite(testResult);
            this.reportLifecycle.startSuite(testSuite);
            testResults.forEach((testResult) => {
                const testOpsResult = this.buildTestResult(testResult, testSuite);
                this.reportLifecycle.stopTestCase(testOpsResult);
            });
            this.reportLifecycle.stopTestSuite(testSuite);
        }
    }
    onRunComplete(contexts, results) {
        if (this.currentExecution === null) {
            throw new Error("No active execution");
        }
        this.reportLifecycle.stopExecution(this.currentExecution);
        this.reportLifecycle.writeTestResultsReport();
        this.reportLifecycle.writeTestSuitesReport();
        this.reportLifecycle.writeExecutionReport();
        this.reportLifecycle.writeMetadata(this.metaData);
        this.reportLifecycle.upload();
    }
    get metaData() {
        return {
            framework: METADATA_FRAMEWORK,
            language: METADATA_LANGUAGE,
            reportFolder: this.options.reportFolder,
            buildLabel: this.options.buildLabel,
            buildUrl: this.options.buildUrl,
        };
    }
    buildTestResult(testResult, testSuite) {
        const { fullName, duration, status, failureMessages } = testResult;
        const testOpsResult = testops_commons_1.TestCreator.testResult(fullName);
        testOpsResult.duration = duration || 0;
        testOpsResult.status = this.convertStatus(status);
        testOpsResult.parentUuid = testSuite.uuid;
        testOpsResult.suiteName = testSuite.name;
        if (failureMessages) {
            failureMessages.forEach((m) => {
                const error = {};
                error.message = "";
                error.stackTrace = strip_ansi_1.default(m);
                testOpsResult.errors = testOpsResult.errors || [];
                testOpsResult.errors.push(error);
            });
        }
        //test result does not have start stop, so we take it from test suite
        testOpsResult.start = testSuite.start;
        testOpsResult.stop = testSuite.start + testOpsResult.duration;
        return testOpsResult;
    }
    buildTestSuite(testResult) {
        const { testResults = [], perfStats } = testResult;
        const ancestorTitle = testResults[0].ancestorTitles[0];
        const suiteName = ancestorTitle || "No name";
        const testSuite = testops_commons_1.TestCreator.testSuite(suiteName);
        testSuite.start = perfStats.start;
        testSuite.stop = perfStats.end;
        testSuite.duration = perfStats.runtime;
        return testSuite;
    }
    convertStatus(status) {
        switch (status) {
            case "passed":
                return testops_commons_1.Status.PASSED;
            case "failed":
                return testops_commons_1.Status.FAILED;
            case "pending":
            case "skipped":
            case "disabled":
            case "todo":
            default:
                return testops_commons_1.Status.SKIPPED;
        }
    }
}
exports.TestOpsJestReporter = TestOpsJestReporter;
//# sourceMappingURL=TestOpsJestReporter.js.map